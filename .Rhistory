num_highest_state <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
filter(cases == max(cases)) %>%
arrange(-cases) %>%
head(1) %>%
pull(cases)
View(num_highest_state)
sum(states[is.na(states)])
sum(states[is.na(states$cases)])
sum(states[is.na(states$deaths)])
state_highest_ratio <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
mutate(death_case_ratio = deaths / cases)
View(state_highest_ratio)
state_highest_ratio <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
mutate(death_case_ratio = deaths / cases) %>%
filter(death_case_ration == max(death_case_ratio))
state_highest_ratio <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
mutate(death_case_ratio = deaths / cases) %>%
filter(death_case_ratio == max(death_case_ratio))
state_highest_ratio <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
mutate(death_case_ratio = deaths / cases) %>%
filter(death_case_ratio == max(death_case_ratio))
state_highest_ratio <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
mutate(death_case_ratio = deaths / cases) %>%
arrange(-death_case_ratio) %>%
head(1) %>%
pull(death_case_ratio)
state_highest_ratio <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
mutate(death_case_ratio = deaths / cases) %>%
arrange(-death_case_ratio)
state_highest_ratio <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
mutate(death_case_ratio = deaths / cases) %>%
arrange(-death_case_ratio) %>%
head(1) %>%
pull(state)
state_lowest_cases <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
filter(cases == max(cases)) %>%
arrange(cases) %>%
head(1) %>%
pull(state)
View(counties)
state_lowest_cases <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
filter(cases == max(cases))
View(state_lowest_cases)
state_lowest_cases <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
filter(cases == min(cases))
View(state_lowest_cases)
state_lowest_cases <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
filter(cases == min(cases)) %>%
arrange(cases)
state_lowest_cases <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
filter(cases == min(cases)) %>%
arrange(cases) %>%
head(1) %>%
pull(state)
state_lowest_cases <- states %>%
filter(date == max(date)) %>%
group_by(state)
View(state_lowest_cases)
state_highest_cases <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
filter(cases == max(cases)) %>%
arrange(-cases) %>%
head(1) %>%
pull(state)
state_highest_cases <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
arrange(-cases) %>%
head(1) %>%
pull(state)
num_highest_state <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
arrange(-cases) %>%
head(1) %>%
pull(cases)
state_lowest_cases <- states %>%
filter(date == max(date)) %>%
group_by(state) %>%
arrange(cases) %>%
head(1) %>%
pull(state)
county_highest_cases <- counties %>%
fitler(date == max(date)) %>%
group_by(county, state)
county_highest_cases <- counties %>%
filter(date == max(date)) %>%
group_by(county, state)
View(county_highest_cases)
county_highest_cases <- counties %>%
filter(date == max(date)) %>%
group_by(county, state) %>%
arrange(-cases)
county_highest_cases <- counties %>%
filter(date == max(date)) %>%
group_by(county, state) %>%
arrange(-cases) %>%
head(1) %>%
pull(county)
county_highest_cases <- counties %>%
filter(date == max(date)) %>%
group_by(county, state) %>%
arrange(-cases) %>%
head(1) %>%
pull(county, state)
county_highest_cases <- counties %>%
filter(date == max(date)) %>%
group_by(county, state) %>%
arrange(-cases) %>%
head(1) %>%
select(county, state)
county_highest_cases <- counties %>%
filter(date == max(date)) %>%
group_by(county, state) %>%
arrange(-cases) %>%
head(1) %>%
select(county, state) %>%
paste0(.$county, ", ", .$state)
View(county_highest_cases)
county_highest_cases
arrange(-cases) %>%
head(1) %>%
pull(full_name)
county_highest_cases <- counties %>%
filter(date == max(date)) %>%
group_by(county, state) %>%
mutate(full_name = paste0(county, ", ", state)) %>%
arrange(-cases) %>%
head(1) %>%
pull(full_name)
county_highest_cases
num_highest_cases_county <- counties %>%
filter(date == max(date)) %>%
group_by(county, state) %>%
arrange(-cases) %>%
head(1) %>%
pull(cases)
num_highest_cases_county
counties <- counties %>%
mutate(location = paste0(county, ", ", state))
View(counties)
location_most_deaths %>% counties %>%
filter(date == max(date)) %>%
group_by(location) %>%
arrange(-deaths) %>%
head(1) %>%
pull(deaths)
location_most_deaths <- counties %>%
filter(date == max(date)) %>%
group_by(location) %>%
arrange(-deaths) %>%
head(1) %>%
pull(deaths)
test_df <- national %>%
mutate(new_cases = cases - lag(cases))
View(test_df)
3980030-3910291
test_df
test_df <- national %>%
mutate(new_cases = cases - lag(cases)) %>%
replace_na(0)
test_df <- national %>%
mutate(new_cases = cases - lag(cases),
new_cases = replace_na(new_cases, 0))
View(test_df)
national <- national %>%
mutate(new_cases = cases - lag(cases),
new_cases = replace_na(new_cases, 0))
test_df <- national %>%
mutate(new_deaths = deaths - lag(deaths),
new_deaths = replace_na(new_deaths, 0))
test_df
national <- national %>%
mutate(new_deaths = deaths - lag(deaths),
new_deaths = replace_na(new_deaths, 0))
date_most_cases <- national %>%
filter(new_cases == max(new_cases))
View(date_most_cases)
date_most_cases <- national %>%
filter(new_cases == max(new_cases)) %>%
pull(new_cases)
date_most_cases <- national %>%
filter(new_cases == max(new_cases)) %>%
pull(date)
date_most_cases
date_most_deaths <- national %>%
filter(new_deaths == max(new_deaths)) %>%
pull(date)
date_most_deaths
most_deaths <- national %>%
filter(new_deaths == max(new_deaths)) %>%
pull(new_deaths)
# You can plot this data with built-in plot functions
plot(national$new_cases)
plot(national$new_deaths)
View(counties)
highest_cases_in_each_state <- counties %>%
group_by(state)
highest_cases_in_each_state
View(highest_cases_in_each_state)
highest_cases_in_each_state <- counties %>%
group_by(state, county)
highest_cases_in_each_state <- counties %>%
group_by(state, county) %>%
filter(cases == max(cases))
highest_cases_in_each_state <- counties %>%
group_by(state, county) %>%
filter(cases == max(cases))
highest_cases_in_each_state <- counties %>%
group_by(location) %>%
filter(cases == max(cases))
highest_cases_in_each_state <- counties %>%
group_by(location) %>%
filter(cases == max(cases)) %>%
filter(location == "Unknown, New York")
highest_cases_in_each_state <- counties %>%
group_by(location) %>%
filter(cases == max(cases))
highest_cases_in_each_state <- counties %>%
group_by(location) %>%
filter(cases == max(cases)) %>%
filter(location == "Snohomish, Washington")
highest_cases_in_each_state <- counties %>%
group_by(location) %>%
filter(cases == max(cases)) %>%
filter(location == "Snohomish, Washington")
source("C:/Users/danie/Desktop/INFO_201_demo/a2-covid-cavazd/analysis.R")
View(highest_cases_in_each_state)
highest_cases_in_each_state <- counties %>%
group_by(location) %>%
filter(cases == max(cases))
View(highest_cases_in_each_state)
highest_cases_in_each_state <- counties %>%
group_by(location) %>%
filter(cases == max(cases)) %>%
filter(location == "Snohomish, Washington")
highest_cases_in_each_state <- counties %>%
group_by(location) %>%
filter(cases == max(cases)) %>%
filter(date == max(date))
highest_cases_in_each_state <- counties %>%
group_by(location) %>%
filter(date == max(date))
View(highest_cases_in_each_state)
highest_cases_in_each_state[highest_cases_in_each_state$location == "Unknown, Montana"]
highest_cases_in_each_state[highest_cases_in_each_state$location == "Unknown, Montana",]
length(unique(highest_cases_in_each_state$location))
highest_cases_in_each_state <- counties %>%
group_by(location) %>%
filter(cases == max(cases))
length(unique(highest_cases_in_each_state$location))
View(highest_cases_in_each_state)
highest_cases_in_each_state <- counties %>%
group_by(location) %>%
filter(cases == max(cases)) %>%
filter(date == max(date))
highest_cases_in_each_state <- counties %>%
group_by(location) %>%
filter(date == max(date))
View(highest_cases_in_each_state)
length(unique(highest_cases_in_each_state$location))
highest_cases_in_each_state <- counties %>%
group_by(location) %>%
filter(date == max(date)) %>%
filter(cases == max(cases))
View(highest_cases_in_each_state)
lowest_deaths_in_each_state <- counties %>%
group_by(location) %>%
filter(date == max(date)) %>%
filter(deaths == min(deaths))
View(lowest_deaths_in_each_state)
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>%
group_by(date) %>%
summarise(county_total_cases = sum(cases))
View(total_cases_counties)
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- left_join(x = total_cases_counties, y = national, by = date)
View(national)
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- left_join(x = total_cases_counties, y = national, by = "date")
View(all_totals)
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(county_total_cases != cases)
View(national_county_diff)
student_grades <- data.frame(student_name, student_grade)
student_name <- c("Student1", "Student2", "Student3", "Student4")
student_grade <- c("A", "A", "B", "C")
student_grades <- data.frame(student_name, student_grade)
student_name <- c("Student1", "Student2", "Student3", "Student4")
student_grade <- c("A", "A", "B", "C")
student_grades <- data.frame(student_name, student_grade)
View(student_grades)
student_name <- c("Student1", "Student2", "Student5", "Student6")
student_year <- c("Freshman", "Senior", "Junior", "Junior")
student_years <- data.frame(student_name, student_year)
View(student_years)
# libraries
library(tidyverse)
student_inner_join <- inner_join(x = student_grades, y = student_years)
View(student_inner_join)
# left
student_left_join <- left_join(x = student_grades, y = student_years)
View(student_left_join)
# right
student_right_join <- right_join(x = student_grades, y = student_years)
View(student_right_join)
student_full_join <- full_join(x = student_grades, y = student_years)
View(student_full_join)
student_name <- c("Student1", "Student2", "Student3", "Student4")
student_grade <- c("A", "A", "B", "C")
student_grades <- data.frame(student_name, student_grade)
student_name <- c("Student1", "Student4", "Student5", "Student6")
student_year <- c("Freshman", "Senior", "Junior", "Junior")
student_years <- data.frame(student_name, student_year)
View(student_grades)
View(student_years)
# inner
student_inner_join <- inner_join(x = student_grades, y = student_years, by = "student_name")
View(student_inner_join)
# libraries
library(tidyverse)
# inner
student_inner_join <- inner_join(x = student_grades, y = student_years, by = "student_name")
View(student_inner_join)
# left
student_left_join <- left_join(x = student_grades, y = student_years)
View(student_left_join)
# right
student_right_join <- right_join(x = student_grades, y = student_years)
View(student_right_join)
# full
student_full_join <- full_join(x = student_grades, y = student_years)
View(student_full_join)
source("C:/Users/danie/Desktop/INFO_201_demo/a2-covid-cavazd/analysis.R")
location_most_deaths <- counties %>%
filter(date == max(date)) %>%
group_by(location) %>%
arrange(-deaths) %>%
head(1) %>%
pull(location)
View(national)
c("rlcs_", region, "_points")
region <- "na"
c("rlcs_", region, "_points")
paste0("rlcs_", region, "_points")
score_df <- read.csv(
file = paste0("rlcs_", region, "_points.csv"),
stringsAsFactors = T,
)
setwd("C:/Users/danie/OneDrive/Documents/School/personal_projects/rlcs_rank_dashboard")
score_df <- read.csv(
file = paste0("data/rlcs_", region, "_points.csv"),
stringsAsFactors = T,
)
View(score_df)
score_df <- read.csv(
file = paste0("data/rlcs_", region, "_points.csv"),
stringsAsFactors = T,
)
ncol(score_df)
ncol(score_df[-team_name])
ncol(score_df[-'team_name'])
ncol(score_df['team_name'])
ncol(score_df[-1])
score_df["team_name"]
score_df[~"team_name"]
score_df[!"team_name"]
`score_df["team_name"]
# add rankings for each event to  rank_df
# -------------------------
for (event in 1:num_events) {
# save to a temp dataframe, select variables from start upto current event
temp_df <- score_df %>% select(1:(event+1)) %>%
# add the score by taking the sum of all event vars
# add event as an int of the current event
mutate('score' = rowSums(select(., 2:(event+1))),
'event' = event) %>%
# remove the different event vars
select(-(2:(event+1))) %>%
# arrange by score and team (alphabetical)
arrange(desc(score), team_name) %>%
# add ranking after sorting (1 to number of teams)
# add the event name in as well
mutate('ranking' = c(1:nrow(.)),
'eventname' = colnames(score_df)[event+1])
# append the temporary dataframe onto rank_df
rank_df <- rbind(rank_df, temp_df)
}
source("C:/Users/danie/OneDrive/Documents/School/personal_projects/rlcs_rank_dashboard/reformat_data.R")
View(rank_df)
# write transformed data to a new csv file
# -------------------------
write.csv(
x = rank_df,
file = paste0("data/rlcs_", region, "_ranks.csv")
)
temp_df <- read.csv('data/rlcs_na_ranks.csv')
View(temp_df)
# write transformed data to a new csv file
# -------------------------
write.csv(
x = rank_df,
file = paste0("data/rlcs_", region, "_ranks.csv",
row.names = F)
)
temp_df <- read.csv('data/rlcs_na_ranks.csv')
View(temp_df)
# write transformed data to a new csv file
# -------------------------
write.csv(
x = rank_df,
file = paste0("data/rlcs_", region, "_ranks.csv",
row.names = NA)
)
temp_df <- read.csv('data/rlcs_na_ranks.csv')
View(temp_df)
# write transformed data to a new csv file
# -------------------------
write.csv(
x = rank_df,
file = paste0("data/rlcs_", region, "_ranks.csv"),
row.names = NA
)
# write transformed data to a new csv file
# -------------------------
write.csv(
x = rank_df,
file = paste0("data/rlcs_", region, "_ranks.csv"),
row.names = F
)
temp_df <- read.csv('data/rlcs_na_ranks.csv')
View(temp_df)
source("C:/Users/danie/OneDrive/Documents/School/personal_projects/rlcs_rank_dashboard/reformat_data.R")
# -------------------------
# author: cavazd
# date  : 5/10/2022
# desc  : Code to restructure rlcs_[region]_points.csv for bump chart
# -------------------------
# Load in tidyverse
library(tidyverse)
# load in data for the given region
# -------------------------
region <- "eu"
score_df <- read.csv(
file = paste0("data/rlcs_", region, "_points.csv"),
stringsAsFactors = T,
)
# create empty dataframe for dataframe stacking
# -------------------------
num_events <- ncol(score_df[-1]) # num of cols without team_name
rank_df <- data.frame()
# add rankings for each event to  rank_df
# -------------------------
for (event in 1:num_events) {
# save to a temp dataframe, select variables from start upto current event
temp_df <- score_df %>% select(1:(event+1)) %>%
# add the score by taking the sum of all event vars
# add event as an int of the current event
mutate('score' = rowSums(select(., 2:(event+1))),
'event' = event) %>%
# remove the different event vars
select(-(2:(event+1))) %>%
# arrange by score and team (alphabetical)
arrange(desc(score), team_name) %>%
# add ranking after sorting (1 to number of teams)
# add the event name in as well
mutate('ranking' = c(1:nrow(.)),
'eventname' = colnames(score_df)[event+1])
# append the temporary dataframe onto rank_df
rank_df <- rbind(rank_df, temp_df)
}
# write transformed data to a new csv file
# -------------------------
write.csv(
x = rank_df,
file = paste0("data/rlcs_", region, "_ranks.csv"),
row.names = F
)
source("C:/Users/danie/OneDrive/Documents/School/personal_projects/rlcs_rank_dashboard/reformat_data.R")
